rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material-ocean.rstheme", apply = TRUE)
install.packages('rstudioapi')
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material-ocean.rstheme", apply = TRUE)
install.packages('data.table')
install.packages('tidyverse')
install.packages('highcharter')
install.packages('shiny')
install.packages('htmltools')
install.packages('rmarkdwon')
install.packages('rmarkdown')
install.packages('flexdashboard')
print('AHMET')
print('AHMET')
library(data.table)
library(data.table)
dt <- data.table(
x = c(1,2,3),
y = c(10,20,30)
)
dt
dt[, z := x+y]
dt
dt <- data.table(
x = c('a','b','c'),
y = c(10,20,30)
)
dt
library(highcharter)
hchart(
dt,
'column',
hcaes(x = x, y = y)
)
dt
library(ggplot2)
ggplot(data = dt, mapping = aes(x = x, y = y))+
geom_bar(stat = 'identity')
dt
install.packages('dbplyr')
library(dpbl)
library(dbplyr)
install.packages('tidyverse')
install.packages('RQSLite')
install.packages('RSQLite')
con <- DBI::dbConnect(RSQLite::SQLite(), ':memory:')
con
View(con)
??copy_to
library(dplyr)
copy_to(con, mtcars)
con
tbl(con)
tbl(con, 'mtcars')
tbl(con, 'mtcarss')
tbl(con, 'mtcars')
data.table(con)
library(data.table)
data.table(con)
t1 <- mtcars
copy_to(con, t1)
tbl(con, 't1')
tbl(con)
con
library(data.table)
fread(paste("id Date      Red  Green  Blue  Black
1  01-01-21  TRUE NA     NA    NA
1  01-01-21  NA   TRUE   NA    NA
2  05-01-21  TRUE NA     NA    NA
3  07-01-21  NA   NA     TRUE  NA
3  07-01-21  TRUE NA     NA    NA
3  07-01-21  NA   NA     NA    TRUE", collapse = '\n'))
t1 <- fread(paste("id Date      Red  Green  Blue  Black
1  01-01-21  TRUE NA     NA    NA
1  01-01-21  NA   TRUE   NA    NA
2  05-01-21  TRUE NA     NA    NA
3  07-01-21  NA   NA     TRUE  NA
3  07-01-21  TRUE NA     NA    NA
3  07-01-21  NA   NA     NA    TRUE", collapse = '\n'))
t1
apply(t1, 2, function(x) summary(x))
apply(t1, 2, function(x) unique(x))
unlist(apply(t1, 2, function(x) unique(x)))
lapply(t1, function(x) unique(x) )
unique(t1)
library(shinydashboard)
install.packages('shinydashboard')
library(shiny) # Shiny web app
library(DT) # for data tables
install.packages('DT')
install.packages('shinydashboard')
install.packages('shinyWidgets')
library(shinyWidgets)
library(shinyWidgets)
install.packages('shinyWidgets')
install.packages("shinyWidgets")
library(dplyr)
#tbl1 <- read_excel('BIRTH_2020.XLSX')
ui <- dashboardPage(
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidPage(
valueBoxOutput("total_counts")
)
)
)
library(shinydashboard)
library(shiny) # Shiny web app
library(DT) # for data tables
library(shinyWidgets)
library(dplyr)
library(readxl)
#tbl1 <- read_excel('BIRTH_2020.XLSX')
ui <- dashboardPage(
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidPage(
valueBoxOutput("total_counts")
)
)
)
server <- function(input, output, session) {
({
tbl1 <-  read_excel('Test1.XLSX')
})
data <-  reactive({
sum(tbl1$TOTAL)
})
output$total_counts <- renderValueBox({
valueBox(
data(),
"Total Counts- 2021 "
)
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
ui <- fluidPage(
selectizeInput(
"foo",
label = "inputs",
choices = "",
multiple = T,
options = list(
delimiter = " ",
create = T
)
),
textOutput("results"),
hr(),
"textInput",
textInput("pasted1", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb1"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split1"),
hr(),
"textAreaInput",
textAreaInput("pasted2", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb2"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split2"),
dataTableOutput("table1")
)
server <- function(input, output, session) {
output$results <- renderText(
paste(paste("item", input$foo))
)
output$verb1 <- renderPrint(charToRaw(input$pasted1))
output$split1 <- renderText(
paste(strsplit(input$pasted1, "\n"))
)
output$verb2 <- renderPrint(charToRaw(input$pasted2))
output$split2 <- renderText(
paste(strsplit(input$pasted2, "\n"))
)
df <- reactive({
df <- as.data.frame(paste(strsplit(input$pasted2, "\n")))
})
output$table1 <- renderDataTable({
df()
}, filter="top", class = 'hover cell-border stripe', editable= TRUE,extensions= 'Buttons',
options = list(dom = 'Bfrtip',pageLength =10,
buttons = c('copy','csv','excel','pdf','print'), scrollX=TRUE),server=FALSE)
}
shinyApp(ui, server)
library(data.table)
library(shiny)
library(DT)
ui <- fluidPage(
selectizeInput(
"foo",
label = "inputs",
choices = "",
multiple = T,
options = list(
delimiter = " ",
create = T
)
),
textOutput("results"),
hr(),
"textInput",
textInput("pasted1", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb1"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split1"),
hr(),
"textAreaInput",
textAreaInput("pasted2", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb2"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split2"),
dataTableOutput("table1")
)
server <- function(input, output, session) {
output$results <- renderText(
paste(paste("item", input$foo))
)
output$verb1 <- renderPrint(charToRaw(input$pasted1))
output$split1 <- renderText(
paste(strsplit(input$pasted1, "\n"))
)
output$verb2 <- renderPrint(charToRaw(input$pasted2))
output$split2 <- renderText(
paste(strsplit(input$pasted2, "\n"))
)
df <- reactive({
if (input$pasted2 != '') {
df <- fread(paste(input$pasted2, collapse = "\n"))
}
})
output$table1 <- renderDataTable({
df()
}, filter="top", class = 'hover cell-border stripe', editable= TRUE,extensions= 'Buttons',
options = list(dom = 'Bfrtip',pageLength =10,
buttons = c('copy','csv','excel','pdf','print'), scrollX=TRUE),server=FALSE)
}
shinyApp(ui, server)
setwd('~/../Desktop/simple-market-app/')
library(data.table)
library(lubridate)
library(openxlsx)
library(DBI)
# master data link
# https://www.kaggle.com/omercolakoglu/turkish-market-sales-dataset-with-9000items
masterdata <- read.xlsx('masterdata/MarketSales.xlsx')
masterdata <- as.data.table(masterdata)
# create lookup tables and remove some string columns
item_lookup <- unique(masterdata[,.(ITEMCODE, ITEMNAME, BRANDCODE, BRAND,
CATEGORY_NAME1, CATEGORY_NAME2, CATEGORY_NAME3)])
masterdata[, ITEMNAME := NULL]
masterdata[, BRAND := NULL]
masterdata[, CATEGORY_NAME1 := NULL][, CATEGORY_NAME2 := NULL][, CATEGORY_NAME3 := NULL]
branch_lookup <- unique(masterdata[, .(BRANCHNR, BRANCH)])
masterdata[, BRANCH :=  NULL]
masterdata[, CITYID := .GRP, by = 'CITY']
city_lookup <- unique(masterdata[, .(CITYID, CITY)])
masterdata[, CITY := NULL]
masterdata[, REGIONID := .GRP, by = 'REGION']
region_lookup <- unique(masterdata[, .(REGIONID, REGION)])
masterdata[, REGION := NULL]
str(masterdata)
masterdata[, DATE_ := as.Date(DATE_, origin = '1900-01-01')]
str(masterdata)
masterdata[, STARTDATE := as.Date(STARTDATE, origin = '1900-01-01')]
masterdata[, ENDDATE := as.Date(ENDDATE, origin = '1900-01-01')]
masterdata[, ID := as.integer(ID)]
masterdata[, AMOUNT := as.integer(AMOUNT)]
masterdata[, PRICE := as.integer(PRICE)]
masterdata[, LINENETTOTAL := as.integer(LINENETTOTAL)]
masterdata[, LINENET := as.integer(LINENET)]
masterdata[, BRANCHNR := as.integer(BRANCHNR)]
masterdata[, CLIENTCODE := as.integer(CLIENTCODE)]
str(masterdata)
setwd('~/../Desktop/simple-market-app/')
library(data.table)
library(lubridate)
library(openxlsx)
library(DBI)
# master data link
# https://www.kaggle.com/omercolakoglu/turkish-market-sales-dataset-with-9000items
masterdata <- read.xlsx('masterdata/MarketSales.xlsx')
masterdata <- as.data.table(masterdata)
# create lookup tables and remove some string columns
item_lookup <- unique(masterdata[,.(ITEMCODE, ITEMNAME, BRANDCODE, BRAND,
CATEGORY_NAME1, CATEGORY_NAME2, CATEGORY_NAME3)])
masterdata[, ITEMNAME := NULL]
masterdata[, BRAND := NULL]
masterdata[, CATEGORY_NAME1 := NULL][, CATEGORY_NAME2 := NULL][, CATEGORY_NAME3 := NULL]
branch_lookup <- unique(masterdata[, .(BRANCHNR, BRANCH)])
masterdata[, BRANCH :=  NULL]
masterdata[, CITYID := .GRP, by = 'CITY']
city_lookup <- unique(masterdata[, .(CITYID, CITY)])
masterdata[, CITY := NULL]
masterdata[, REGIONID := .GRP, by = 'REGION']
region_lookup <- unique(masterdata[, .(REGIONID, REGION)])
masterdata[, REGION := NULL]
masterdata[, DATE_ := as.Date(DATE_, origin = '1900-01-01')]
masterdata[, STARTDATE := as.Date(STARTDATE, origin = '1900-01-01')]
masterdata[, ENDDATE := as.Date(ENDDATE, origin = '1900-01-01')]
# convert float columns to int
masterdata[, ID := as.integer(ID)]
masterdata[, AMOUNT := as.integer(AMOUNT)]
masterdata[, PRICE := as.integer(PRICE)]
masterdata[, LINENETTOTAL := as.integer(LINENETTOTAL)]
masterdata[, LINENET := as.integer(LINENET)]
masterdata[, BRANCHNR := as.integer(BRANCHNR)]
masterdata[, CLIENTCODE2 := as.integer(CLIENTCODE)]
masterdata[is.na(CLIENTCODE2)]
masterdata[is.na(CLIENTCODE)]
masterdata[is.na(CLIENTCODE2) & ID %in% masterdata[is.na(CLIENTCODE), ID]]
masterdata[is.na(CLIENTCODE2) & !ID %in% masterdata[is.na(CLIENTCODE), ID]]
setwd('~/../Desktop/simple-market-app/')
library(data.table)
library(lubridate)
library(openxlsx)
library(DBI)
# master data link
# https://www.kaggle.com/omercolakoglu/turkish-market-sales-dataset-with-9000items
masterdata <- read.xlsx('masterdata/MarketSales.xlsx')
masterdata <- as.data.table(masterdata)
# create lookup tables and remove some string columns
item_lookup <- unique(masterdata[,.(ITEMCODE, ITEMNAME, BRANDCODE, BRAND,
CATEGORY_NAME1, CATEGORY_NAME2, CATEGORY_NAME3)])
masterdata[, ITEMNAME := NULL]
masterdata[, BRAND := NULL]
masterdata[, CATEGORY_NAME1 := NULL][, CATEGORY_NAME2 := NULL][, CATEGORY_NAME3 := NULL]
branch_lookup <- unique(masterdata[, .(BRANCHNR, BRANCH)])
masterdata[, BRANCH :=  NULL]
masterdata[, CITYID := .GRP, by = 'CITY']
city_lookup <- unique(masterdata[, .(CITYID, CITY)])
masterdata[, CITY := NULL]
masterdata[, REGIONID := .GRP, by = 'REGION']
region_lookup <- unique(masterdata[, .(REGIONID, REGION)])
masterdata[, REGION := NULL]
masterdata[, DATE_ := as.Date(DATE_, origin = '1900-01-01')]
masterdata[, STARTDATE := as.Date(STARTDATE, origin = '1900-01-01')]
masterdata[, ENDDATE := as.Date(ENDDATE, origin = '1900-01-01')]
# convert float columns to int
masterdata[, ID := as.integer(ID)]
masterdata[, AMOUNT := as.integer(AMOUNT)]
masterdata[, PRICE := as.integer(PRICE)]
masterdata[, LINENETTOTAL := as.integer(LINENETTOTAL)]
masterdata[, LINENET := as.integer(LINENET)]
masterdata[, BRANCHNR := as.integer(BRANCHNR)]
masterdata[, CLIENTCODE := as.integer(CLIENTCODE)]
# connect DB
con <- DBI::dbConnect(RPostgres::Postgres(),
dbname = 'marketsales',
host = 'localhost',
port = 5432,
user = 'postgres',
password = '123')
str(masterdata)
# write tables to PostgreSQL DB
dbWriteTable(con, 'masterdata', masterdata)
dbWriteTable(con, 'itemlookup', item_lookup)
dbWriteTable(con, 'branchlookup', branch_lookup)
dbWriteTable(con, 'citylookup', city_lookup)
# disconnect from db
DBI::dbDisconnect(con)
